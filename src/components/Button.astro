---
/**
 * name slot support `alignRight` and `alignLeft`
 */
interface Props {
  size: "small" | "medium" | "big";
  className?: string;
  tag?: "a" | "button" | "div";
  url?: string;
  text: string;
  style: "primary" | "secondary" | "danger";
  id?: string;
}
const {
  size,
  style,
  text,
  id,
  tag: Tag = "div",
  url = "#",
  className = "",
} = Astro.props;
const aProps =
  Tag == "a"
    ? {
        href: url,
        target: "_blank",
        rel: "noopener noreferrer",
      }
    : {};
---

<Tag class={`base ${size} ${style} ${className}`} id={id} {...aProps}>
  <slot name="alignRight" />
  <slot />
  {text}
  <slot name="alignLeft" />
</Tag>
<style style="scss">
  .base {
    --h: 28px;
    --p: var(--padding-1x);
    --r: var(--radius-1x);
    --b: var(--color-primary);
    width: var(--content-max);
    cursor: pointer;
    box-sizing: border-box;
    display: flex;
    gap: var(--p);
    align-items: center;
    color: white;
    height: var(--h);
    padding: calc(var(--p) / 2) calc(var(--p));
    font-size: calc(var(--h) - var(--p) * 2);
    background: var(--color-primary);
    border: 2px solid var(--b);
    border-radius: var(--r);
  }
  .medium {
    --h: calc(32px + var(--padding-2x));
    --p: var(--padding-2x);
    --r: var(--radius-2x);
  }
  .big {
    --h: calc(48px + var(--padding-3x));
    --p: var(--padding-3x);
    --r: var(--radius-2x);
  }
  .secondary {
    background: transparent;
  }
  .danger {
    --b: var(--color-danger);
    background: var(--color-danger);
  }
</style>
